{"ast":null,"code":"var _jsxFileName = \"/home/devang/CS/webdev/projects/fullstack/smart-brain/src/App.jsx\";\nimport { Component } from \"react\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport HeroSection from \"./components/hero-section/HeroSection\";\nimport DetectSection from \"./components/detect-section/DetectSection\";\n\n// setup clarifai and return request options using it\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnRequestUsingClarafai = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \"0b67fd927a9441bea48d88e5560ec538\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"dv080499\";\n  const APP_ID = \"smart-brain\";\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    inputs: [{\n      data: {\n        image: {\n          url: IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonPress = event => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"face - detection\" + \"/outputs\", returnRequestUsingClarafai).then(response => response.json()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n    };\n    this.state = {\n      input: \"\",\n      imageUrl: \"\"\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-screen bg-slate-200\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center gap-10\",\n        children: [/*#__PURE__*/_jsxDEV(HeroSection, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DetectSection, {\n          onInputChange: this.onInputChange,\n          onButtonPress: this.onButtonPress,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["Component","Navigation","HeroSection","DetectSection","jsxDEV","_jsxDEV","returnRequestUsingClarafai","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","App","constructor","onInputChange","event","setState","input","target","value","onButtonPress","state","fetch","then","response","json","result","console","log","catch","error","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/devang/CS/webdev/projects/fullstack/smart-brain/src/App.jsx"],"sourcesContent":["import { Component } from \"react\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport HeroSection from \"./components/hero-section/HeroSection\";\nimport DetectSection from \"./components/detect-section/DetectSection\";\n\n// setup clarifai and return request options using it\nconst returnRequestUsingClarafai = (imageUrl) => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \"0b67fd927a9441bea48d88e5560ec538\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"dv080499\";\n  const APP_ID = \"smart-brain\";\n\n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID,\n    },\n    inputs: [\n      {\n        data: {\n          image: {\n            url: IMAGE_URL,\n          },\n        },\n      },\n    ],\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT,\n    },\n    body: raw,\n  };\n\n  return requestOptions;\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n    };\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onButtonPress = (event) => {\n    this.setState({ imageUrl: this.state.input });\n\n    fetch(\n      \"https://api.clarifai.com/v2/models/\" + \"face - detection\" + \"/outputs\",\n      returnRequestUsingClarafai\n    )\n      .then((response) => response.json())\n      .then((result) => console.log(result))\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  render() {\n    return (\n      <div className=\"w-full h-screen bg-slate-200\">\n        <Navigation />\n        <div className=\"flex flex-col items-center gap-10\">\n          <HeroSection />\n          <DetectSection\n            onInputChange={this.onInputChange}\n            onButtonPress={this.onButtonPress}\n            imageUrl={this.state.imageUrl}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}